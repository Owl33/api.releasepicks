name: Steam Maintenance Cron

on:
  schedule:
    # UTC 19:00 → KST 04:00 (매일 1회 실행)
    - cron: '0 19 * * *'
  workflow_dispatch:
    inputs:
      dry_run:
        description: '실제 저장 없이 대상만 계산'
        required: false
        type: boolean
      refresh_limit:
        description: '출시 윈도우 갱신 limit (기본 1000)'
        required: false
        type: string
        default: '1000'
      new_limit:
        description: 'Steam 신규 탐지 limit (기본 1000)'
        required: false
        type: string
        default: '1000'

concurrency:
  group: steam-maintenance
  cancel-in-progress: false

jobs:
  run-maintenance:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    permissions:
      contents: read
    env:
      NODE_ENV: production
      STEAM_CRON_DRY_RUN: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true' && 'true' || 'false' }}
      STEAM_CRON_REFRESH_LIMIT: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.refresh_limit || '1000' }}
      STEAM_CRON_NEW_LIMIT: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.new_limit || '1000' }}
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v4

      - name: .env 파일 생성
        env:
          APP_ENV_FILE: ${{ secrets.APP_ENV_FILE }}
        run: |
          if [ -z "$APP_ENV_FILE" ]; then
            echo "APP_ENV_FILE 시크릿이 필요합니다." >&2
            exit 1
          fi
          printf '%s\n' "${APP_ENV_FILE}" > .env

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci

      - name: Steam 유지보수 실행
        run: |
          EXTRA_ARGS=""
          if [ "$STEAM_CRON_DRY_RUN" = "true" ]; then
            EXTRA_ARGS="--dry-run"
          fi

          echo "refresh_limit=$STEAM_CRON_REFRESH_LIMIT, new_limit=$STEAM_CRON_NEW_LIMIT, dry_run=$STEAM_CRON_DRY_RUN"
          set -e
          npm run cron:steam-maintenance -- $EXTRA_ARGS
